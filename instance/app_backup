from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import pandas as pd
from datetime import datetime
from google.cloud import bigquery


db = SQLAlchemy()

app = Flask(__name__)

# Configuração do banco de dados SQLite
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///banco.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)  # Inicialize o SQLAlchemy com a aplicação Flask

# Defina o IP e a porta desejados para a aplicação
host = '127.0.0.0'  # IP para escutar em todas as interfaces
port = 5000       # Porta desejada

class Cliente(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100))
    email = db.Column(db.String(100), unique=True)
    endereco = db.Column(db.String(200))

class Loja(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100))
    proprietario_id = db.Column(db.Integer, db.ForeignKey('cliente.id'))
    proprietario = db.relationship('Cliente', backref=db.backref('lojas', lazy=True))

class Produto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100))
    descricao = db.Column(db.Text)
    preco = db.Column(db.Float)
    estoque = db.Column(db.Integer)
    loja_id = db.Column(db.Integer, db.ForeignKey('loja.id'))
    loja = db.relationship('Loja', backref=db.backref('produtos', lazy=True))

class RegistroVenda(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    produto_id = db.Column(db.Integer, db.ForeignKey('produto.id'))
    produto = db.relationship('Produto', backref=db.backref('registros_venda', lazy=True))
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'))
    cliente = db.relationship('Cliente', backref=db.backref('compras', lazy=True))
    quantidade = db.Column(db.Integer)
    data_venda = db.Column(db.DateTime)

# Função para criar o banco de dados e suas tabelas
def create_db():
    '''
    Função para criar o banco de dados e suas tabelas.
    '''
    with app.app_context():
        db.create_all()


if __name__ == '__main__':
    # Cria o banco de dados se não existir
    create_db()
    # Executa o aplicativo Flask
    app.run(host=host, port=port, debug=True)